package com.sjli.basis;


import java.util.Arrays;

public class A16_Control_Array {
    public static void main(String[] args) {
    //遍历数组
        //通过for循环就可以遍历数组
        int[] ns = { 1, 4, 9, 16, 25 };
        for (int i=0; i<ns.length; i++) {
            int n = ns[i];
            System.out.println(n);
        }
        //第二种方式是使用for each循环，直接迭代数组的每个元素：
        int[] ns1 = { 1, 4, 9, 16, 25 };
        for (int n : ns1) {
            System.out.println(n);
        }
    //打印数组内容
        //直接打印数组变量，得到的是数组在JVM中的引用地址：这并没有什么意义
        int[] ns2 = { 1, 1, 2, 3, 5, 8 };
        System.out.println(ns2); // 类似 [I@7852e922
        // Java标准库提供了Arrays.toString()，可以快速打印数组内容：
        int[] ns3 = { 1, 1, 2, 3, 5, 8 };
        System.out.println(Arrays.toString(ns3));

        System.out.println("_________________________________");
    //数组排序
        //冒泡排序  算法对一个整型数组从小到大进行排序：常用的排序算法有冒泡排序、插入排序和快速排序等。
        int[] ns4 = { 28, 12, 89, 73, 65, 18, 96, 50, 8, 36 };
        // 排序前:
        System.out.println(Arrays.toString(ns4));
        for (int i = 0; i < ns4.length - 1; i++) {
            for (int j = 0; j < ns4.length - i - 1; j++) {
                if (ns4[j] > ns4[j+1]) {
                    // 交换ns[j]和ns[j+1]:
                    int tmp = ns4[j];
                    ns4[j] = ns4[j+1];
                    ns4[j+1] = tmp;
                }
            }
        }
        // 排序后:
        System.out.println(Arrays.toString(ns4));

        System.out.println("_________________________________");
        //实际上，Java的标准库已经内置了排序功能，我们只需要调用JDK提供的Arrays.sort()就可以排序：
        int[] ns5 = { 28, 12, 89, 73, 65, 18, 96, 50, 8, 36 };
        Arrays.sort(ns5);
        System.out.println(Arrays.toString(ns5));
        /*必须注意，对数组排序实际上修改了数组本身。例如，排序前的数组是：

        int[] ns = { 9, 3, 6, 5 };
        在内存中，这个整型数组表示如下：

              ┌───┬───┬───┬───┐
        ns───>│ 9 │ 3 │ 6 │ 5 │
              └───┴───┴───┴───┘
        当我们调用Arrays.sort(ns);后，这个整型数组在内存中变为：

              ┌───┬───┬───┬───┐
        ns───>│ 3 │ 5 │ 6 │ 9 │
              └───┴───┴───┴───┘
        即变量ns指向的数组内容已经被改变了。

        如果对一个字符串数组进行排序，例如：

        String[] ns = { "banana", "apple", "pear" };
        排序前，这个数组在内存中表示如下：

                           ┌──────────────────────────────────┐
                       ┌───┼──────────────────────┐           │
                       │   │                      ▼           ▼
                 ┌───┬─┴─┬─┴─┬───┬────────┬───┬───────┬───┬──────┬───┐
        ns ─────>│░░░│░░░│░░░│   │"banana"│   │"apple"│   │"pear"│   │
                 └─┬─┴───┴───┴───┴────────┴───┴───────┴───┴──────┴───┘
                   │                 ▲
                   └─────────────────┘
        调用Arrays.sort(ns);排序后，这个数组在内存中表示如下：

                           ┌──────────────────────────────────┐
                       ┌───┼──────────┐                       │
                       │   │          ▼                       ▼
                 ┌───┬─┴─┬─┴─┬───┬────────┬───┬───────┬───┬──────┬───┐
        ns ─────>│░░░│░░░│░░░│   │"banana"│   │"apple"│   │"pear"│   │
                 └─┬─┴───┴───┴───┴────────┴───┴───────┴───┴──────┴───┘
                   │                              ▲
                   └──────────────────────────────┘
        原来的3个字符串在内存中均没有任何变化，但是ns数组的每个元素指向变化了。*/
        System.out.println("_________________________________");
    //多维数组
    //二维数组
        int[][] ns6 = {
                { 1, 2, 3, 4 },
                { 5, 6, 7, 8 },
                { 9, 10, 11, 12 }
        };
        System.out.println(ns6.length); // 3
        /*
        因为ns包含3个数组，因此，ns.length为3。实际上ns在内存中的结构如下：

                            ┌───┬───┬───┬───┐
                 ┌───┐  ┌──>│ 1 │ 2 │ 3 │ 4 │
        ns ─────>│░░░│──┘   └───┴───┴───┴───┘
                 ├───┤      ┌───┬───┬───┬───┐
                 │░░░│─────>│ 5 │ 6 │ 7 │ 8 │
                 ├───┤      └───┴───┴───┴───┘
                 │░░░│──┐   ┌───┬───┬───┬───┐
                 └───┘  └──>│ 9 │10 │11 │12 │
                            └───┴───┴───┴───┘
         */

        //如果我们定义一个普通数组arr0，然后把ns[0]赋值给它：
        int[] arr0 = ns6[0];
        System.out.println(arr0.length); // 4
        /* 实际上arr0就获取了ns数组的第0个元素。因为ns数组的每个元素也是一个数组，
        因此，arr0指向的数组就是{ 1, 2, 3, 4 }。在内存中，结构如下：

                    arr0 ─────┐
                              ▼
                            ┌───┬───┬───┬───┐
                 ┌───┐  ┌──>│ 1 │ 2 │ 3 │ 4 │
        ns ─────>│░░░│──┘   └───┴───┴───┴───┘
                 ├───┤      ┌───┬───┬───┬───┐
                 │░░░│─────>│ 5 │ 6 │ 7 │ 8 │
                 ├───┤      └───┴───┴───┴───┘
                 │░░░│──┐   ┌───┬───┬───┬───┐
                 └───┘  └──>│ 9 │10 │11 │12 │
                            └───┴───┴───┴───┘
        */
        //访问二维数组的某个元素需要使用array[row][col]，例如：
        System.out.println(ns6[1][2]); // 7
        //二维数组的每个数组元素的长度并不要求相同，例如，可以这么定义ns数组：
        int[][] ns7 = {
                { 1, 2, 3, 4 },
                { 5, 6 },
                { 7, 8, 9 }
        };
        /*这个二维数组在内存中的结构如下：

                            ┌───┬───┬───┬───┐
                 ┌───┐  ┌──>│ 1 │ 2 │ 3 │ 4 │
        ns ─────>│░░░│──┘   └───┴───┴───┴───┘
                 ├───┤      ┌───┬───┐
                 │░░░│─────>│ 5 │ 6 │
                 ├───┤      └───┴───┘
                 │░░░│──┐   ┌───┬───┬───┐
                 └───┘  └──>│ 7 │ 8 │ 9 │
                            └───┴───┴───┘
        */
        //打印一个二维数组,使用Java标准库的Arrays.deepToString()：
        int[][] ns8 = {
                { 1, 2, 3, 4 },
                { 5, 6, 7, 8 },
                { 9, 10, 11, 12 }
        };
        System.out.println(Arrays.deepToString(ns8));
    //三维数组
        //三维数组就是二维数组的数组。可以这么定义一个三维数组：
        int[][][] ns9 = {
                {
                        {1, 2, 3},
                        {4, 5, 6},
                        {7, 8, 9}
                },
                {
                        {10, 11},
                        {12, 13}
                },
                {
                        {14, 15, 16},
                        {17, 18}
                }
        };
       /* 它在内存中的结构如下：

                                      ┌───┬───┬───┐
                           ┌───┐  ┌──>│ 1 │ 2 │ 3 │
                       ┌──>│░░░│──┘   └───┴───┴───┘
                       │   ├───┤      ┌───┬───┬───┐
                       │   │░░░│─────>│ 4 │ 5 │ 6 │
                       │   ├───┤      └───┴───┴───┘
                       │   │░░░│──┐   ┌───┬───┬───┐
                ┌───┐  │   └───┘  └──>│ 7 │ 8 │ 9 │
        ns ────>│░░░│──┘              └───┴───┴───┘
                ├───┤      ┌───┐      ┌───┬───┐
                │░░░│─────>│░░░│─────>│10 │11 │
                ├───┤      ├───┤      └───┴───┘
                │░░░│──┐   │░░░│──┐   ┌───┬───┐
                └───┘  │   └───┘  └──>│12 │13 │
                       │              └───┴───┘
                       │   ┌───┐      ┌───┬───┬───┐
                       └──>│░░░│─────>│14 │15 │16 │
                           ├───┤      └───┴───┴───┘
                           │░░░│──┐   ┌───┬───┐
                           └───┘  └──>│17 │18 │
                                      └───┴───┘
        如果我们要访问三维数组的某个元素，例如，ns[2][0][1]，只需要顺着定位找到对应的最终元素15即可。

        理论上，我们可以定义任意的N维数组。但在实际应用中，除了二维数组在某些时候还能用得上，更高维度的数组很少使用。*/
    }
}
